{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Komputer\\\\Desktop\\\\Komputer\\\\Projects\\\\TASK\\\\client\\\\web\\\\daily_do\\\\src\\\\components\\\\todo\\\\TodoListTemplate.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport TodoForm from './TodoForm';\nimport TodoItemList from './TodoItemList';\nimport './TodoListTemplate.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TodoListTemplate = ({\n  darkTheme\n}) => {\n  _s();\n\n  const [todoItemList, setTodoItemList] = useState([]);\n  const [formInput, setFormInput] = useState('');\n  const [fetched, setFetched] = useState(false);\n  useEffect(() => {\n    // \n    const inputs = document.querySelectorAll('input');\n\n    if (darkTheme) {\n      inputs.forEach(input => input.classList.add('dark'));\n    } else {\n      inputs.forEach(input => input.classList.remove('dark'));\n    }\n  }, [darkTheme]); // FETCH - GET\n\n  useEffect(() => {\n    //첫 로딩시에만 서버로부터 Todo 목록 가져오기\n    if (!fetched) {\n      fetch('http://localhost:8080/api/todo').then(response => response.json()).then(items => {\n        console.log(\"서버로부터 Todo 목록 가져옴: \", items);\n        setTodoItemList(items);\n        setFetched(true);\n      });\n    }\n  }, [fetched]); // CREAT - POST \n\n  function handleCreate() {\n    // Form 안의 내용을 초기화\n    setFormInput(''); // 서버로 보낼 객체 아이템 생성\n\n    const newTodoItem = {\n      content: formInput,\n      isDone: false\n    }; // POST 방식으로 서버 전송\n\n    fetch('http://localhost:8080/api/todo', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(newTodoItem)\n    }) // 서버에서 받은 응답을 객체화 후, TodoItemList에 추가 (컴포넌트 re-render됨)\n    .then(response => response.json()).then(newTodoItem => {\n      console.log(\"새 Todo 아이템 생성됨: \", newTodoItem);\n      setTodoItemList([...todoItemList, newTodoItem]);\n    });\n  } // REMOVE - DELETE\n\n\n  function handleRemove(id) {\n    // 서버와 클라이언트 따로따로 처리됨\n    const updatedTodoItemList = todoItemList.filter(todoItem => todoItem.id !== id); //서버\n\n    fetch(`http://localhost:8080/api/todo/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(deletedId => {\n      console.log(\"ID:\", deletedId, \" 삭제됨\");\n    }); //클라이언트\n\n    setTodoItemList(updatedTodoItemList);\n  } // UPDATE (content) - PUT\n\n\n  function handleTodoInputChange(e, id) {\n    // 서버와 클라이언트 따로따로 처리됨\n    const index = todoItemList.findIndex(todoItem => todoItem.id === id);\n    const selectedItem = todoItemList[index];\n    selectedItem.content = e.target.value; // 서버\n\n    fetch(`http://localhost:8080/api/todo/${id}`, {\n      method: 'PUT',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(selectedItem)\n    }).then(response => response.json()).then(updatedId => {\n      console.log(\"ID:\", updatedId, \" 업데이트됨\");\n    }); // 클라이언트\n\n    const updatedTodoItemList = [...todoItemList];\n    updatedTodoItemList[index] = { ...selectedItem\n    };\n    setTodoItemList(updatedTodoItemList);\n  } // UPDATE (isDone) - PUT\n\n\n  function handleToggle(id) {\n    // 서버와 클라이언트 따로따로 처리됨\n    const index = todoItemList.findIndex(todoItem => todoItem.id === id);\n    const selectedItem = todoItemList[index];\n    selectedItem.isDone = !selectedItem.isDone; // 서버\n\n    fetch(`http://localhost:8080/api/todo/${id}`, {\n      method: 'PUT',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(selectedItem)\n    }).then(response => response.json()).then(updatedId => {\n      console.log(\"ID:\", updatedId, \" 업데이트됨\");\n    }); // 클라이언트\n\n    const updatedTodoItemList = [...todoItemList];\n    updatedTodoItemList[index] = { ...selectedItem\n    };\n    setTodoItemList(updatedTodoItemList);\n  }\n\n  function handleFormInputChange(e) {\n    setFormInput(e.target.value);\n  }\n\n  function handleKeyPress(e) {\n    if (e.key === 'Enter') {\n      handleCreate();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"template-wrapper todo-list-template-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uBAA9\\uB85D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-lists-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(TodoItemList, {\n        todoList: todoItemList,\n        onRemove: handleRemove,\n        onChange: handleTodoInputChange,\n        onToggle: handleToggle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-form-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(TodoForm, {\n        value: formInput,\n        onChange: handleFormInputChange,\n        onCreate: handleCreate,\n        onKeyPress: handleKeyPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TodoListTemplate, \"oOotRlCID13FzWYfYFZkudrzTUA=\");\n\n_c = TodoListTemplate;\nexport default TodoListTemplate;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoListTemplate\");","map":{"version":3,"sources":["C:/Users/Komputer/Desktop/Komputer/Projects/TASK/client/web/daily_do/src/components/todo/TodoListTemplate.js"],"names":["useEffect","useState","TodoForm","TodoItemList","TodoListTemplate","darkTheme","todoItemList","setTodoItemList","formInput","setFormInput","fetched","setFetched","inputs","document","querySelectorAll","forEach","input","classList","add","remove","fetch","then","response","json","items","console","log","handleCreate","newTodoItem","content","isDone","method","headers","body","JSON","stringify","handleRemove","id","updatedTodoItemList","filter","todoItem","deletedId","handleTodoInputChange","e","index","findIndex","selectedItem","target","value","updatedId","handleToggle","handleFormInputChange","handleKeyPress","key"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport TodoItemList from './TodoItemList';\r\nimport './TodoListTemplate.css';\r\n\r\nconst TodoListTemplate = ({ darkTheme }) => {\r\n    const [ todoItemList, setTodoItemList ] = useState([]);\r\n    const [ formInput, setFormInput ] = useState('');\r\n    const [ fetched, setFetched ] = useState(false);\r\n\r\n    useEffect(() => { // \r\n        const inputs = document.querySelectorAll('input');\r\n    \r\n        if(darkTheme) {  \r\n          inputs.forEach(input => input.classList.add('dark'));\r\n        }\r\n        else {\r\n          inputs.forEach(input => input.classList.remove('dark'));\r\n        }\r\n      }, [ darkTheme ]);\r\n\r\n    // FETCH - GET\r\n    useEffect(() => {\r\n        //첫 로딩시에만 서버로부터 Todo 목록 가져오기\r\n        if(!fetched) {\r\n            fetch('http://localhost:8080/api/todo')\r\n            .then((response) => response.json())\r\n            .then((items) => {\r\n                console.log(\"서버로부터 Todo 목록 가져옴: \", items);\r\n                setTodoItemList(items);\r\n                setFetched(true);\r\n            });\r\n        }\r\n    }, [fetched]);\r\n\r\n    // CREAT - POST \r\n    function handleCreate() {\r\n        // Form 안의 내용을 초기화\r\n        setFormInput('');\r\n\r\n        // 서버로 보낼 객체 아이템 생성\r\n        const newTodoItem = {\r\n            content: formInput,\r\n            isDone: false\r\n        };\r\n        \r\n        // POST 방식으로 서버 전송\r\n        fetch('http://localhost:8080/api/todo', {\r\n            method : 'POST',\r\n            headers: {\r\n                'content-type' : 'application/json'\r\n            },\r\n            body : JSON.stringify(newTodoItem)\r\n        }) // 서버에서 받은 응답을 객체화 후, TodoItemList에 추가 (컴포넌트 re-render됨)\r\n        .then((response) => response.json())\r\n        .then((newTodoItem) => {\r\n            console.log(\"새 Todo 아이템 생성됨: \", newTodoItem);\r\n             setTodoItemList([...todoItemList, newTodoItem]);\r\n         })\r\n    }\r\n    \r\n    // REMOVE - DELETE\r\n    function handleRemove(id) {\r\n        // 서버와 클라이언트 따로따로 처리됨\r\n        const updatedTodoItemList = todoItemList.filter(todoItem => todoItem.id !== id);\r\n\r\n        //서버\r\n        fetch(`http://localhost:8080/api/todo/${id}`, {\r\n            method: 'DELETE',\r\n            headers : {\r\n                'content-type' : 'application/json'\r\n            }           \r\n        })\r\n        .then((response) => response.json())\r\n        .then((deletedId) => {\r\n            console.log(\"ID:\", deletedId, \" 삭제됨\");\r\n        });\r\n\r\n        //클라이언트\r\n        setTodoItemList(updatedTodoItemList);\r\n    }\r\n  \r\n    // UPDATE (content) - PUT\r\n    function handleTodoInputChange(e, id) {\r\n        // 서버와 클라이언트 따로따로 처리됨\r\n        const index = todoItemList.findIndex(todoItem => todoItem.id === id);\r\n        const selectedItem = todoItemList[index];\r\n        selectedItem.content = e.target.value;\r\n\r\n        // 서버\r\n        fetch(`http://localhost:8080/api/todo/${id}`, {\r\n            method : 'PUT',\r\n            headers : {\r\n                'content-type' : 'application/json'\r\n            },\r\n            body : JSON.stringify(selectedItem)\r\n        })\r\n        .then((response) => response.json())\r\n        .then((updatedId) => {\r\n            console.log(\"ID:\", updatedId, \" 업데이트됨\");\r\n        });\r\n\r\n        // 클라이언트\r\n        const updatedTodoItemList = [...todoItemList];\r\n\r\n        updatedTodoItemList[index] = {\r\n            ...selectedItem,\r\n        };\r\n\r\n        setTodoItemList(updatedTodoItemList);\r\n    }\r\n    \r\n    // UPDATE (isDone) - PUT\r\n    function handleToggle(id) {\r\n        // 서버와 클라이언트 따로따로 처리됨\r\n        const index = todoItemList.findIndex(todoItem => todoItem.id === id);\r\n        const selectedItem = todoItemList[index];\r\n        selectedItem.isDone = !selectedItem.isDone;\r\n\r\n        // 서버\r\n        fetch(`http://localhost:8080/api/todo/${id}`, {\r\n            method : 'PUT',\r\n            headers : {\r\n                'content-type' : 'application/json'\r\n            },\r\n            body : JSON.stringify(selectedItem)\r\n        })\r\n        .then((response) => response.json())\r\n        .then((updatedId) => {\r\n            console.log(\"ID:\", updatedId, \" 업데이트됨\");\r\n        });\r\n\r\n        // 클라이언트\r\n        const updatedTodoItemList = [...todoItemList];\r\n\r\n        updatedTodoItemList[index] = {\r\n            ...selectedItem\r\n        };\r\n\r\n        setTodoItemList(updatedTodoItemList);       \r\n    }\r\n\r\n    function handleFormInputChange(e) {\r\n        setFormInput(e.target.value);\r\n    }\r\n\r\n    function handleKeyPress(e) {\r\n        if(e.key === 'Enter') {\r\n            handleCreate();\r\n        }\r\n    }\r\n  \r\n\r\n    return (\r\n        <div className=\"template-wrapper todo-list-template-wrapper\">\r\n            <div className=\"todo-title\">\r\n                <h2>목록</h2>\r\n                <p></p>\r\n            </div>\r\n            <div className=\"todo-lists-wrapper\">\r\n                <TodoItemList\r\n                    todoList={todoItemList}\r\n                    onRemove={handleRemove}\r\n                    onChange={handleTodoInputChange}\r\n                    onToggle={handleToggle}\r\n                />\r\n            </div>\r\n            <div className=\"todo-form-wrapper\">\r\n                <TodoForm\r\n                    value={formInput}\r\n                    onChange={handleFormInputChange}\r\n                    onCreate={handleCreate}\r\n                    onKeyPress={handleKeyPress}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoListTemplate;"]},"metadata":{},"sourceType":"module"}